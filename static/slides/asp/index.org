#+REVEAL_ROOT1: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_ROOT1: https://cdn.jsdelivr.net/npm/reveal.js@3.9.1/js/reveal.min.js
#+REVEAL_ROOT1: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.8.0/
#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.7.0/

#+REVEAL_THEME: simple
# serif
# https://github.com/hakimel/reveal.js/tree/master/css/theme
#+REVEAL_HIGHLIGHT_CSS: https://highlightjs.org/static/demo/styles/solarized-light.css
#+REVEAL_HIGHLIGHT_CSS1: https://highlightjs.org/static/demo/styles/atelier-cave-light.css
# %r/lib/css/solarized-light.css

#+REVEAL_TRANS: linear
# fade
#+REVEAL_TRANS_SPEED: fast

# this removes search
#+REVEAL_PLUGINS: (markdown highlight zoom)

#+REVEAL_EXTRA_CSS: default.css

# #+REVEAL_EXTRA_OPTIONS: center:true, slideNumber:false
# #+REVEAL_INIT_OPTIONS: width:1200, height:800, controlsLayout: 'edges'
# #+REVEAL_INIT_OPTIONS: slideNumber:false, center:false

# this moves level 2 headings to the top level
# #+REVEAL_HLEVEL: 2

#+OPTIONS: timestamp:nil toc:nil num:nil reveal_slide_number:nil reveal_center:nil ':t
#+nopeOPTIONS: reveal_control:nil
# center vertically aligns stuff, the left alignment is done with css
# smart quotes prevents unpaired quotes

# M-x org-re-reveal-export-to-html

# http://jr0cket.co.uk/2017/03/org-mode-driven-presentations-with-org-reveal-spacemacs.html
# http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html.html
# http://jr0cket.co.uk/slides/revealjs.html

#+Title: Answer Set Programming: Into the Multiverse
#+Author:
#+Email:

* What? Why?
- Practical logic programming
- Expressive; easy to model search problems
- Fast enough to be used in the Real World
** Search problems?
Abstractly,
- A search space (and a way to navigate it)
- A goal
** e.g. solving puzzles
- Search space: game states
- Goal: winning state
#+REVEAL_HTML: <img class="stretch" style="float: right" src="8puzzle.png">
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://people.cs.pitt.edu/~milos/courses/cs1571/Lectures/Class3.pdf">Milos Hauskrecht</a></p>
** e.g. procedural generation
- Search space: all fully-connected maps
- Goal: a map traversable in n steps
# [[file:./map.png]]
#+REVEAL_HTML: <img class="stretch" style="float: right" src="map1.png">
# margin: auto; display: block;
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://eis-blog.soe.ucsc.edu/2011/10/map-generation-speedrun/">A Map Generation Speedrun with Answer Set Programming, 2011</a></p>
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://course.ccs.neu.edu/cs5150f13/readings/smith_asp4pcg.pdf">Answer Set Programming for Procedural Content Generation: A Design Space Approach, 2011</a></p>
** e.g. algorithmic composition
- Search space: all sequences of notes
- Goal: melodies which abide by the so-called "Palestrina rules" for Renaissance music
#+REVEAL_HTML: <blockquote>The composition of most styles of music is governed by rules... by formalising these rules in a suitable logical language, powerful and expressive intelligent composition tools can be easily built.</blockquote>
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://arxiv.org/abs/1006.4948">Automatic Music Composition using Answer Set Programming, 2010</a></p>
** e.g. dependency resolution
- Search space: all possible package configurations
- Goal: a set of package versions which satisfies all dependency constraints
#+REVEAL_HTML: <img class="stretch" style="float: right" src="https://miro.medium.com/max/1072/0*micRkkPRrafLdQNF.png">
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://potassco.org/aspcud/">aspcud</a></p>
** e.g. PI Planning
- Search space: all possible plans (ticket-sprint assignments)
- Goal: a plan subject to lots of unspoken constraints...
#+REVEAL_HTML: <img class="stretch" style="float: right" src="tool.png">
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://asankhaya.github.io/pdf/Automating-Continuous-Planning-in-SAFe.pdf">Automating Continuous Planning in SAFe, 2020</a></p>
** "Optimized brute force"
Appropriate when:

- brute force is the best one can do (NP-hard)
- domain isn't fully understood; rapid prototyping > asymptotics
- constraints are nontrivial and would eventually require search
# https://gist.github.com/rndmcnlly/7e2b958786cbbb525f7cc8c275019b70
* Programming
"Generate and test"

- Define search space
- Remove unwanted parts
** "Generate and Test"
#+REVEAL_HTML: <blockquote>Trial and error is also a heuristic method of problem solving, repair, tuning, or obtaining knowledge. In the field of computer science, the method is called <b>generate and test</b> (Brute force). In elementary algebra, when solving equations, it is <b>guess and check</b>.</blockquote>
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://en.wikipedia.org/wiki/Trial_and_error">Trial and error, Wikipedia</a></p>
** "Guess and Check"
#+REVEAL_HTML: <blockquote>There are 15 puppies and birds at a pet shop. There are 42 legs altogether. How many puppies are there?</blockquote>
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://practicle.sg/guess-and-check/">Learn Guess and Check, practicle.sg</a></p>
** Facts
#+BEGIN_SRC erlang
animal(puppy).
animal(bird).

legs(puppy,4).
legs(bird,2).

animal_n(1..15).
#+END_SRC
** Rules
#+BEGIN_SRC erlang
bipedal(A) :- animal(A), legs(A,2).
#+END_SRC
"A thing A is bipedal if it is a two-legged animal."
** Answer Sets
#+BEGIN_SRC erlang
bipedal(A) :- animal(A), legs(A,2).
#+END_SRC

#+BEGIN_SRC
$ clingo animals.lp
clingo version 5.4.0
Reading from animals.lp
Solving...
Answer: 1
animal_n(1) animal_n(2) animal_n(3) animal_n(4) animal_n(5) animal_n(6) animal_n(7) animal_n(8) animal_n(9) animal_n(10) animal_n(11) animal_n(12) animal_n(13) animal_n(14) animal_n(15) legs(puppy,4) legs(bird,2) animal(puppy) animal(bird) bipedal(bird)
SATISFIABLE

Models       : 1
Calls        : 1
Time         : 0.024s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.001s
#+END_SRC
** Choice Rules
Define search space, or "possible worlds":
#+BEGIN_SRC erlang
animal(bird).
{ animal(puppy) }.
#+END_SRC

#+BEGIN_SRC
$ clingo animals.lp
clingo version 5.4.0
Reading from animals.lp
Solving...
Answer: 1
animal(bird)
Answer: 2
animal(bird) animal(puppy)
SATISFIABLE

Models       : 2
Calls        : 1
Time         : 0.021s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.001s
#+END_SRC

#+REVEAL_HTML: <img style="position: absolute; height: 20%; top: 50%; left: 50%;" src="dog.png">
** Choice Rules
Generate every possible pet shop... all $2^{15}$ of them:
#+BEGIN_SRC erlang
{ animal_at_shop(A, N) : animal(A) } = 1 :- animal_n(N).
#+END_SRC

#+BEGIN_SRC
SATISFIABLE
Models       : 32768
Calls        : 1
Time         : 3.294s (Solving: 3.27s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.249s
#+END_SRC
** Integrity Constraints
Remove possible worlds:
#+BEGIN_SRC erlang
animal(bird).
{ animal(puppy) }.
:- animal(puppy).
#+END_SRC

#+BEGIN_SRC
$ clingo -n 0 animals.lp
clingo version 5.4.0
Reading from animals.lp
Solving...
Answer: 1
animal(bird)
SATISFIABLE

Models       : 1
Calls        : 1
Time         : 0.013s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.001s
#+END_SRC
** Integrity Constraints
Remove every world without the right number of legs:
#+BEGIN_SRC erlang
correct_number_of_legs :- legs_total(42).
:- not correct_number_of_legs.
#+END_SRC
** Aggregates
#+BEGIN_SRC erlang
legs_total(L) :-
  L = #sum { N,M : animal_at_shop(A, M), legs(A, N) }.

animal_count(A,N) :-
  N = #count { M : animal_at_shop(A, M) }, animal(A).
#+END_SRC
** Directives
#+BEGIN_SRC erlang
#show animal_count/2.
#project animal_count(A,N).
#+END_SRC
#+BEGIN_SRC erlang
#minimize { D : unassigned_count(D) }.
#+END_SRC
** Putting it all together
#+BEGIN_SRC erlang
animal(puppy;bird).
legs(puppy,4).
legs(bird,2).
animal_n(1..15).
{ animal_at_shop(A, N) : animal(A) } = 1 :- animal_n(N).
correct_number_of_legs :- legs_total(42).
:- not correct_number_of_legs.
legs_total(L) :- L = #sum { N,M : animal_at_shop(A, M), legs(A, N) }.
animal_count(A,N) :- N = #count { M : animal_at_shop(A, M) }, animal(A).
#show animal_count/2.
#project animal_count(A,N).
#+END_SRC
** Running
#+BEGIN_SRC
$ clingo -n 0 animals.lp --project
clingo version 5.4.0
Reading from animals.lp
Solving...
Answer: 1
animal_count(puppy,6) animal_count(bird,9)
SATISFIABLE

Models       : 1
Calls        : 1
Time         : 0.271s (Solving: 0.26s 1st Model: 0.00s Unsat: 0.26s)
CPU Time     : 0.268s
#+END_SRC
** "Generate and Test"

- Define search space using facts, rules, and aggregates
- Remove unwanted parts using integrity constraints
* PI Planning + ASP
#+REVEAL_HTML: <img class="stretch" style="float: right" src="tool.png">
** Facts
#+BEGIN_SRC erlang
sprint(1..1).
story(1..2).

story_weight(2,1).
story_depends_on(1,2).
sprint_capacity(1,1).
#+END_SRC
#+REVEAL_HTML: <img class="stretch" style="float: right" src="tool.png">
** Assignments
Each story is assigned to exactly one sprint:
#+BEGIN_SRC erlang
{ assign(T,S) : sprint(S) } = 1 :- story(T).
#+END_SRC
** Sprint Capacity
Sum story weights, grouping by assigned sprint:
#+BEGIN_SRC erlang
sprint_total(S,To) :-
  To = #sum { W,T : story_weight(T,W), assign(T,S) }, sprint(S).
#+END_SRC
** Sprint Capacity
The sum of story weights cannot exceed sprint capacity, unless they're unassigned:
#+BEGIN_SRC erlang
sprint(unassigned).

:- sprint_total(S,A), sprint(S),
  sprint_capacity(S,E), A > E, S != unassigned.
#+END_SRC
** Optimization
#+BEGIN_SRC erlang
unassigned_count(D) :- D = #count { T : assign(T,unassigned) }.
#minimize { D : unassigned_count(D) }.
#+END_SRC
** Dependencies
Given a story dependency, the dependent story cannot be assigned to a later sprint than its dependency:
#+BEGIN_SRC erlang
:- assign(T1,S1), assign(T2,S2),
  story_depends_on(T1,T2), S1 < S2.
#+END_SRC
** Pins
Story 1 must always be assigned to sprint 2:
#+BEGIN_SRC erlang
:- not assign(1,2).
#+END_SRC
** Design Choices
- Don't solve for assignments globally
- Don't solve on keypress...
- Where to run solver?
- Intuitiveness of assignments?
- Unstated constraints
* Generating Stories
#+REVEAL_HTML: <img class="stretch" style="float: right" src="https://cdn.mos.cms.futurecdn.net/fyt3DhfUxVZWvub92kx3Rg-1024-80.jpg">
** Generating Stories
#+REVEAL_HTML: <blockquote style="font-size: 0.75em">Then suddenly, he was struck by a powerful but simple little truth, and it was this: That English grammar is governed by rules that are almost mathematical in their strictness! Given the words, and given the sense of what is to be said, then there is only one correct order in which those words can be arranged. Therefore, it stands to reason that an engine built along the lines of the electric computer could be adjusted to arrange words (instead of numbers) in their right order according to the rules of grammar. Then feed it with plots and leave it to write the sentences.</blockquote>
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://www.doc.ic.ac.uk/~rak/papers/event%20calculus.pdf">The Great Automatic Grammatizator, 1998</a></p>
** The Event Calculus
- Logical representation of actions and their effects
- "How do we represent time?"
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://www.doc.ic.ac.uk/~rak/papers/event%20calculus.pdf">A Logic-based Calculus of Events, 1986</a></p>
** Key ideas
- Index rules by time
- Keep track of events which happen
- Keep track of the effects of events, i.e. what is now known about the world
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://gist.github.com/rndmcnlly/cc801233012df3cb0883">Adam's minimal event calculus formalism</a></p>
** Time
#+BEGIN_SRC erlang
#const t_max=15.
time(0..t_max).
#+END_SRC
- Abstract unit of time
- Simulate ~t_max~ time points
** Events
Events /happen/ only under specific conditions
#+BEGIN_SRC erlang
{ happens(T,E) } :- time(T), possible(T,E).
#+END_SRC
Only one event happens at a time
#+BEGIN_SRC erlang
:- time(T), not { happens(T,E) } = 1.
#+END_SRC
** Effects of Events
Facts hold as a result of things happening
#+BEGIN_SRC erlang
initiated(T,F) :- happens(T,E), initiates(T,E,F).
holds(T+1,F) :- time(T), happens(T,E), initiates(T,E,F).
#+END_SRC
Facts are /inertial/; they continue to hold without external influence
#+BEGIN_SRC erlang
terminated(T,F) :- happens(T,E), terminates(T,E,F).
holds(T+1,F) :- time(T), holds(T,F), not terminated(T,F).
#+END_SRC
** Authoring
- Events: ~possible~, ~initiates~, ~terminates~
- Static knowledge
- Dynamic knowledge
- Constraints
** Let's make a Disney movie
#+REVEAL_HTML: <img class="stretch" style="float: right" src="https://media-assets-02.thedrum.com/cache/images/thedrum-prod/s3-news-tmp-77017-maxresdefault_9--2x1--940.jpg">
** Static Knowledge
#+BEGIN_SRC erlang
character(rey).
character(kylo).
character(palpatine).
#+END_SRC
** Places
#+BEGIN_SRC erlang
place(pasaana).
place(kijimi).
place(endor).
place(exegol).
place(resistance_base).
place(tatooine).

always_reachable(resistance_base,pasaana).
always_reachable(pasaana,kijimi).
always_reachable(kijimi,endor).
always_reachable(exegol,endor).
always_reachable(exegol,kijimi).
always_reachable(exegol,tatooine).
#+END_SRC
** Dynamic Knowledge
#+BEGIN_SRC erlang
holds(0,reachable(P1,P2)) :- always_reachable(P1,P2),
  place(P1), place(P2).
#+END_SRC
** Dynamic Knowledge
#+BEGIN_SRC erlang
holds(0,at(kylo,exegol)).
holds(0,at(rey,resistance_base)).
holds(0,at(palpatine,exegol)).

holds(0,alive(C)) :- character(C).
#+END_SRC
** Moving around
#+BEGIN_SRC erlang
possible(T,moves(C,P1,P2)) :-
  holds(T,at(C,P1)), not holds(T,at(C,P2)),
  holds(T,reachable(P1,P2)),
  holds(T,alive(C)),
  character(C), place(P1), place(P2).
initiates(T,moves(C,P1,P2),at(C,P2)) :-
  possible(T,moves(C,P1,P2)).
terminates(T,moves(C,P1,P2),at(C,P1)) :-
  possible(T,moves(C,P1,P2)).
#+END_SRC
** Trying it out
#+BEGIN_SRC erlang
$ clingo disney.lp
clingo version 5.4.0
Reading from disney.lp
Solving...
Answer: 1
happens(0,moves(kylo,exegol,pasaana)) happens(2,moves(rey,resistance_base,pasaana)) happens(3,moves(palpatine,exegol,tatooine)) happens(1,moves(kylo,pasaana,endor)) happens(4,moves(kylo,endor,tatooine)) happens(5,moves(kylo,tatooine,exegol))
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.021s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.021s
#+END_SRC
** Trying it out
#+BEGIN_SRC erlang
happens(0,moves(rey,resistance_base,pasaana))
happens(1,moves(rey,pasaana,kijimi))
happens(2,moves(rey,kijimi,endor))
happens(3,moves(palpatine,exegol,kijimi))
happens(4,moves(kylo,exegol,kijimi))
happens(5,moves(palpatine,kijimi,endor))
#+END_SRC
** Wayfinding
#+BEGIN_SRC erlang
item(wayfinder).

holds(0,has(endor,wayfinder)).

possible(T,finds(C,I,P)) :-
  holds(T,at(C,P)),
  not holds(T,has(C,I)), holds(T,has(P,I)),
  holds(T,alive(C)),
  character(C), item(I), place(P), time(T).
initiates(T,finds(C,I,P),has(C,I)) :- possible(T,finds(C,I,P)).
terminates(T,finds(C,I,P),has(P,I)) :- possible(T,finds(C,I,P)).
#+END_SRC
** Wayfinding
#+BEGIN_SRC erlang
happens(0,moves(kylo,exegol,endor))
happens(1,moves(palpatine,exegol,endor))
happens(2,finds(palpatine,wayfinder,endor))
happens(3,moves(rey,resistance_base,pasaana))
#+END_SRC
** MacGuffins
#+BEGIN_SRC erlang
holds(T,reachable(P,exegol)) :-
  holds(T-1, has(rey,wayfinder)), time(T), place(P).
#+END_SRC
No one goes into Exegol until then...
** MacGuffins
#+BEGIN_SRC erlang
happens(0,moves(rey,resistance_base,pasaana))
happens(1,moves(rey,pasaana,kijimi))
happens(2,moves(rey,kijimi,endor))
happens(3,finds(rey,wayfinder,endor))
happens(4,moves(palpatine,exegol,endor))
happens(5,moves(rey,endor,exegol))
#+END_SRC
** Not from a Jedi
#+BEGIN_SRC erlang
side(light).
side(dark).

holds(0,alignment(rey,light)).
holds(0,alignment(kylo,dark)).
holds(0,alignment(palpatine,dark)).
#+END_SRC
** Not from a Jedi
#+BEGIN_SRC erlang
possible(T,turns(C1,C2,S1,S2)) :-
  holds(T,alignment(C2,S1)), not holds(T,alignment(C2,S2)),
  holds(T,at(C1,P)), holds(T,at(C2,P)),
  holds(T,alignment(C1,S2)),
  holds(T,alive(C1)), holds(T,alive(C2)),
  place(P), character(C1), character(C2), side(S1), side(S2).
initiates(T,turns(C1,C2,S1,S2),alignment(C2,S2)) :-
  possible(T,turns(C1,C2,S1,S2)).
terminates(T,turns(C1,C2,S1,S2),alignment(C2,S1)) :-
  possible(T,turns(C1,C2,S1,S2)).
#+END_SRC
** Not from a Jedi
#+BEGIN_SRC erlang
happens(0,moves(rey,resistance_base,pasaana))
happens(1,moves(rey,pasaana,kijimi))
happens(2,moves(rey,kijimi,endor))
happens(3,moves(palpatine,exegol,endor))
happens(4,moves(kylo,exegol,endor))
happens(5,turns(palpatine,rey,light,dark))
#+END_SRC
** Lightsabers
#+BEGIN_SRC erlang
possible(T,lightsaber_duel(C1,C2)) :-
  C1 != C2,
  holds(T,alignment(C1,S1)), holds(T,alignment(C2,S2)), S1 != S2,
  holds(T,at(C1,P)), holds(T,at(C2,P)),
  holds(T,alive(C1)), holds(T,alive(C2)),
  place(P), character(C1), character(C2),
  side(S1), side(S2), time(T).
terminates(T,lightsaber_duel(C1,C2),alive(C2)) :-
  possible(T,lightsaber_duel(C1,C2)).
#+END_SRC
** Lightsabers
#+BEGIN_SRC erlang
climax :- happens(T,lightsaber_duel(C1,C2)),
  character(C1), character(C2).
:- not climax.

rey_reaches_exegol :- holds(t_max+1,at(rey,exegol)).
:- not rey_reaches_exegol.

turn :- happens(T,turns(C1,C2,S1,S2)),
  character(C1), character(C2), side(S1), side(S2).
:- not turn.
#+END_SRC
** Lightsabers
#+BEGIN_SRC erlang
happens(0,moves(rey,resistance_base,pasaana))
happens(1,moves(kylo,exegol,kijimi))
happens(2,moves(rey,pasaana,kijimi))
happens(3,moves(palpatine,exegol,kijimi))
happens(4,turns(rey,palpatine,dark,light))
happens(5,lightsaber_duel(rey,kylo))
#+END_SRC
** Plot Point Reversal
#+BEGIN_SRC erlang
{ pick_reason(T,plot_point_reversal(C,R)) : reason(R) } = 1 :-
  character(C), time(T).

possible(T,plot_point_reversal(C,R)) :-
  not holds(T,alive(C)),
  pick_reason(T,plot_point_reversal(C,R)),
  place(P), character(C), time(T).
initiates(T,plot_point_reversal(C,R),alive(C)) :-
  possible(T,plot_point_reversal(C,R)).
#+END_SRC
** Plot Point Reversal
#+BEGIN_SRC erlang
anticlimax :- happens(T,plot_point_reversal(C,R)),
  character(C), reason(R).
:- not anticlimax.
#+END_SRC
** Generated Plot
#+BEGIN_SRC erlang
happens(0,moves(palpatine,exegol,tatooine))
happens(1,moves(kylo,exegol,endor))
happens(2,moves(rey,resistance_base,pasaana))
happens(3,moves(rey,pasaana,kijimi))
happens(4,moves(rey,kijimi,endor))
happens(5,lightsaber_duel(kylo,rey))
happens(6,plot_point_reversal(rey,it_was_all_a_dream))
happens(7,lightsaber_duel(kylo,rey))
happens(8,plot_point_reversal(rey,the_dark_side_of_the_force_is_a_pathway_to_many_abilities_some_consider_to_be_unnatural))
happens(9,finds(rey,wayfinder,endor))
happens(10,turns(rey,kylo,dark,light))
happens(11,moves(kylo,endor,exegol))
happens(12,moves(kylo,exegol,tatooine))
happens(13,lightsaber_duel(palpatine,kylo))
happens(14,moves(rey,endor,exegol))
happens(15,moves(palpatine,tatooine,exegol))
#+END_SRC
** Another
#+BEGIN_SRC erlang
happens(0,moves(rey,resistance_base,pasaana))
happens(1,moves(rey,pasaana,kijimi))
happens(2,moves(rey,kijimi,endor))
happens(3,finds(rey,wayfinder,endor))
happens(4,moves(kylo,exegol,endor))
happens(5,moves(rey,endor,exegol))
happens(6,moves(rey,exegol,kijimi))
happens(7,moves(rey,kijimi,exegol))
happens(8,moves(kylo,endor,exegol))
happens(9,lightsaber_duel(rey,kylo))
happens(10,lightsaber_duel(rey,palpatine))
happens(11,plot_point_reversal(kylo,it_was_a_hologram))
happens(12,moves(rey,exegol,tatooine))
happens(13,plot_point_reversal(palpatine,it_was_a_hologram))
happens(14,moves(rey,tatooine,exegol))
happens(15,turns(rey,palpatine,dark,light))
#+END_SRC
** Story generation + ASP
- Tabula rasa generation: explore plot space
- Constrained generation: touch on given plot points
- Finish a partial story
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://adamsmith.as/papers/a17-chen.pdf">RoleModel: Towards a Formal Model of Dramatic Roles for Story Generation</a></p>
** Can we really generate stories?
#+REVEAL_HTML: <p style="float: left; width: 45%;">Yes, but expect lots of writing...</p>
#+REVEAL_HTML: <div style="float: right;"><blockquote class="twitter-tweet"><p lang="en" dir="ltr">PCG promises a free lunch. <br><br>It delivers an angry cow and a small knife, and a promise that if you can make this work, you&#39;ll eat like a king.</p>&mdash; Kate Compton, actual doctor of weird ai (@GalaxyKate) <a href="https://twitter.com/GalaxyKate/status/1236883360762355712?ref_src=twsrc%5Etfw">March 9, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
* Potpourri
- Performance
- Random sampling
- Debugging
- Ecosystem
** clingo runs forever!
- Variables are replaced with concrete values before any solving starts ("grounding")
- Wide relations will cause blowup
- Denormalize
- More efficient encodings
** Random sampling
#+BEGIN_SRC
--rand-freq=1 --seed=39403
#+END_SRC
** Debugging
#+BEGIN_SRC
Solving...
UNSATISFIABLE

Models       : 0
#+END_SRC
** Debugging
#+REVEAL_HTML: <blockquote>Removing a goal can make a predicate at most more general, never more specific.</blockquote>
#+REVEAL_HTML: <p style="font-size: 0.5em; clear:right; text-align:right;"><a href="https://www.metalevel.at/prolog/debugging">Declarative Debugging, The Power of Prolog</a></p>
** Debugging
- Bisect program!
- Give names to integrity constraints so invalid worlds can be inspected
- Unfortunately, have to modify program
# - Surprisingly cogent errors. need example
** Ecosystem
- Unit tests: [[https://github.com/rndmcnlly/ansunit][AnsUnit]]
- ORM: [[https://github.com/potassco/clorm][clorm]]
- IDE: [[http://www.sealion.at/][SeaLion]]
- Visualization toolkit: [[https://github.com/idaks/PW-explorer][Possible Worlds Explorer]]
- PCG: [[https://github.com/dariusf/exnihilo][Ex Nihilo]]
#+REVEAL_HTML: <img class="stretch" src="sealion.png">
* Limitations
** "Declarative"
- Small changes can drastically affect performance
- Correctness is not obvious
- Translations of imperative concepts can be difficult
- Unfamiliar
** Black box
- By design
- Efficient encodings are hard for non-experts
- No e.g. global constraints
* Reflection
- Useful for a class of problems
- Rapid prototyping
- Nice formalism that works in practice
** Further Reading
- [[https://www.cs.utexas.edu/users/vl/teaching/378/ASP.pdf][Answer Set Programming, Lifschitz]]
- [[http://ceur-ws.org/Vol-546/49-63.pdf][A Pragmatic Programmer's Guide to Answer Set Programming]]
- [[https://github.com/potassco/guide][Clingo user guide]]
- [[https://www.doc.ic.ac.uk/~mpsha/ECExplained.pdf][The Event Calculus Explained]]

# Generating test data
# Generating high quality puzzles

# ** Big picture
# - *Prolog*
# - *Datalog*: terminating, pure Prolog subset
# - *ASP*: Datalog + disjunction/"possible worlds"
# # - State of the art: CDCL, propagator API for custom theories

# ** "Declarative"
# - "What", not "how"
# - Programming without explicit control flow
# - SQL
# ... with caveats.

# Comparison with other kinds of solvers
# Sat. Higher level modelling language. Written directly instead of compiled to. No comment on performance. Preferences
# Constraint solving
# Not nearly as many global constraints
