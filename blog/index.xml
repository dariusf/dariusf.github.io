<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Darius Foo</title><link>https://dariusf.github.io/blog/</link><description>Recent content in Blog on Darius Foo</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright Â© 2022, Darius Foo.</copyright><lastBuildDate>Fri, 16 Aug 2024 11:59:39 +0800</lastBuildDate><atom:link href="https://dariusf.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Verifying effectful higher-order programs with staged logic</title><link>https://dariusf.github.io/staged-logic/</link><pubDate>Fri, 16 Aug 2024 11:59:39 +0800</pubDate><guid>https://dariusf.github.io/staged-logic/</guid><description>&lt;!-- (23 Aug 2024) -->
&lt;!-- (13 Sep 2024) -->
&lt;p>&lt;em>Text version of a talk given at the &lt;a href="https://nus-plse.github.io/seminars.html">NUS PLSE Seminar&lt;/a> and &lt;a href="https://www.fm24.polimi.it/?page_id=612">FM 2024&lt;/a> in Milan.&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#effectful-higher-order-functions">Effectful higher-order functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#specifying-higher-order-functions-today">Specifying higher-order functions today&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#example-1-mutating-the-list">Example 1: mutating the list&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-2-stronger-precondition">Example 2: stronger precondition&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-3-effects-outside-metalogic">Example 3: effects outside metalogic&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#staged-logic">Staged logic&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#effectful-placeholders">Effectful placeholders&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recursion">Recursion&lt;/a>&lt;/li>
&lt;li>&lt;a href="#re-summarization">Re-summarization&lt;/a>&lt;/li>
&lt;li>&lt;a href="#compaction-via-biabduction">Compaction via biabduction&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#solutions-to-problematic-examples">Solutions to problematic examples&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#example-1">Example 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-2">Example 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="#example-3">Example 3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="effectful-higher-order-functions">Effectful higher-order functions&lt;/h1>
&lt;p>Most programming languages in use today are higher-order, and allow programmers to perform &lt;em>effects&lt;/em> (primitive state, exceptions, or algebraic effects) in any context.&lt;/p></description></item><item><title>Choreographic PlusCal</title><link>https://dariusf.github.io/cpluscal/</link><pubDate>Sun, 31 Dec 2023 11:15:45 +0800</pubDate><guid>https://dariusf.github.io/cpluscal/</guid><description>&lt;p>Choreographic PlusCal is a refinement of PlusCal with features for specifying distributed protocols.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">choreography&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">C&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">coordinators&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">P&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">participants&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">all&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">coordinators&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">task&lt;/span> &lt;span class="n">C&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;phase1&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">all&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">participants&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;prepare&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">either&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;prepared&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;aborted&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cancel&lt;/span> &lt;span class="s">&amp;#34;phase1&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">aborted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">all&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">participants&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abort&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;aborted&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">all&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">participants&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;commit&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Transmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;committed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="roles-and-parties">Roles and parties&lt;/h2>
&lt;p>Protocol models in Choreographic PlusCal begin with definitions of &lt;em>roles&lt;/em>, &lt;em>parties&lt;/em>, and their local variables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">choreography&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">F&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">failure_detectors&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">P&lt;/span> &lt;span class="err">\&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="n">participants&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">variables&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">voted_yes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">voted_no&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FALSE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">outcome&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;none&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A &lt;em>party&lt;/em> is an identifier for a protocol participant, and is typically a model value.
Protocol participants have local state and communicate via messages.
A &lt;em>role&lt;/em> is a set of parties.&lt;/p></description></item><item><title>Self-send projection</title><link>https://dariusf.github.io/selfsends/</link><pubDate>Tue, 28 Nov 2023 10:33:45 +0800</pubDate><guid>https://dariusf.github.io/selfsends/</guid><description>&lt;p>$\gdef\kwproj{\mathbin{\upharpoonright}}$
$\gdef\gall#1#2#3{\forall #1 : #2 \cdot #3}$
$\gdef\galls#1#2#3#4{\forall #1 : #2 \setminus #3 \cdot #4}$
$\gdef\galle#1#2#3#4{\forall #1 : #2 \setminus \{#3\} \cdot #4}$
$\gdef\gtransmit#1#2#3{#1 \to #2:#3}$
$\gdef\kwpar{\mathrel{||}}$
$\gdef\spar#1#2{#1 \kwpar #2}$
$\gdef\lsend#1#2{\mathit{send}\ #1\ #2}$
$\gdef\lrecv#1{\mathit{recv\ #1}}$&lt;/p>
&lt;p>&lt;a href="https://wen.works/2020/12/17/an-introduction-to-session-types/">Session types&lt;/a> are a neat and fascinating formalism.
Intuitively, they are small languages for describing communication protocols.
Viewing these protocols as types, a type system may be used to check that a program implements a protocol correctly and has other nice properties, such as deadlock-freedom.
Unlike types which constrain data, session types are &lt;em>behavioral&lt;/em> specifications and constrain what &lt;em>programs&lt;/em> can &lt;em>do&lt;/em>.&lt;/p></description></item><item><title>Jump-to-definition in PL papers</title><link>https://dariusf.github.io/latex-notation/</link><pubDate>Tue, 01 Aug 2023 14:17:22 +0800</pubDate><guid>https://dariusf.github.io/latex-notation/</guid><description>&lt;p>PL papers tend to use lots of &lt;a href="https://www.jsoftware.com/papers/tot.htm">notation&lt;/a>.
To manage this, paper sources usually include a &amp;quot;macros.tex&amp;quot; containing a slew of &lt;code>\newcommand&lt;/code>s, defining wonderful languages of terms and naming all the clever judgments and syntactic sugar.&lt;/p>
&lt;p>While notation can increase clarity, it can cause &lt;a href="https://blog.sigplan.org/2020/09/29/pl-notation-is-a-barrier-to-entry/">difficulty&lt;/a> to readers, who
haven't had the hundreds of hours of practice the authors have had using and reading those intricate strings of symbols, and internalizing their precedences and meaning.
Readers will forget what things denote and will have to scroll up and down repeatedly in a careful reading of the work.&lt;/p></description></item><item><title>Ordering events across live loops in Sonic Pi</title><link>https://dariusf.github.io/sonic-pi-time/</link><pubDate>Sat, 03 Jun 2023 14:50:17 +0800</pubDate><guid>https://dariusf.github.io/sonic-pi-time/</guid><description>&lt;p>Sonic Pi has an elegant and well-thought &lt;a href="https://in-thread.sonic-pi.net/t/what-does-time-mean-in-sonic-pi/4509">temporal semantics&lt;/a>. Using the following program as an example,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sample&lt;/span> &lt;span class="ss">:drum_bass_hard&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">play&lt;/span> &lt;span class="ss">:c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">sleep&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sample&lt;/span> &lt;span class="ss">:drum_cowbell&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The drum sample and note can be thought of as starting simultaneously, and the cowbell will play precisely one second&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> after.
In other words, &lt;code>sleep&lt;/code> there isn't actually POSIX's &lt;code>sleep&lt;/code> - it can be thought of as delimiting a section on a virtual timeline, a section which &lt;em>does not include the time taken to start playing the sample and note&lt;/em>.&lt;/p></description></item><item><title>Trees with holes</title><link>https://dariusf.github.io/trees-with-holes/</link><pubDate>Mon, 16 May 2022 16:28:10 +0800</pubDate><guid>https://dariusf.github.io/trees-with-holes/</guid><description>&lt;p>While working on a top-down synthesis prototype, I got distracted by the issue of how to represent incomplete program fragments, with holes to be filled in.&lt;/p>
&lt;p>The simple way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ocaml" data-lang="ocaml">&lt;span class="line">&lt;span class="cl">&lt;span class="k">type&lt;/span> &lt;span class="n">expr&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="nc">One&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="nc">Plus&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="n">expr&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">expr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="nc">Hole&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="o">(__)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Hole&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">let&lt;/span> &lt;span class="n">hypothesis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">Plus&lt;/span> &lt;span class="o">(__,&lt;/span> &lt;span class="o">__)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and this would probably have worked, but with quadratic-time substitution, since all the holes would be at the bottom of the tree.&lt;/p>
&lt;p>How could we do better?&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="difference-lists">Difference lists&lt;/h2>
&lt;p>&lt;a href="https://en.wikibooks.org/wiki/Prolog/Difference_Lists">Difference lists&lt;/a> originate in Prolog folklore.&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>
Unlike regular lists, they end with a logic variable instead of an empty list.
When unified, the logic variable allows something to be appended to the list quickly, without rebuilding it.&lt;/p></description></item><item><title>Visualizing Z3's proofs</title><link>https://dariusf.github.io/z3-proofs/</link><pubDate>Sun, 21 Mar 2021 12:00:06 +0800</pubDate><guid>https://dariusf.github.io/z3-proofs/</guid><description>&lt;p>&lt;em>A writeup of a presentation I gave in class.&lt;/em>&lt;/p>
&lt;p>SMT solvers like Z3 are often also called automated theorem provers. Why? What do their proofs look like?&lt;/p>
&lt;p>An SMT solver tells us if a formula in first-order logic (augmented with various theories) is &lt;em>satisfiable&lt;/em>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>: there is some assignment of variables that makes the formula true. Z3 can even produce such an assignment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">z3&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">solve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not every formula is satisfiable, though. In that case, there are two possibilities.&lt;/p></description></item><item><title>Pretty stack-and-heap diagrams</title><link>https://dariusf.github.io/stack-heap/</link><pubDate>Sun, 07 Feb 2021 00:13:31 +0800</pubDate><guid>https://dariusf.github.io/stack-heap/</guid><description>&lt;p>I'm teaching an introductory programming class this semester, which introduced students to the runtime stack and the heap in one of the early tutorials.&lt;/p>
&lt;p>For consistency across face-to-face and online classes, I decided to have the diagrams in my slides instead of drawing them terribly over and over.&lt;/p>
&lt;p>While there were lots of references for drawing such diagrams by hand, there didn't seem to be any small and simple tools for &lt;em>generating&lt;/em> them.
I only found &lt;a href="http://tug.ctan.org/tex-archive/macros/latex/contrib/drawstack/">drawstack.sty&lt;/a> (which does what it says on the box and only handles the stack), and everyone else seemed to use TikZ directly, which felt a little too low-level for this.&lt;/p></description></item><item><title>Mouseover Minesweeper</title><link>https://dariusf.github.io/minesweeper/</link><pubDate>Tue, 29 Sep 2020 20:03:28 +0800</pubDate><guid>https://dariusf.github.io/minesweeper/</guid><description>&lt;p>Automation in puzzle games is tricky to balance.
The issue is that puzzle games can involve some busywork, e.g. keeping track of the possibilities for each cell in Sudoku, and that removing the tedious parts allows the player to &lt;a href="https://www.playgoodsudoku.com/">focus on the &amp;quot;interesting&amp;quot; parts&lt;/a> of the puzzle.&lt;/p>
&lt;p>Unfortunately, the parts of the game that are core to its experience can be quite subjective.
Automation can also quickly spiral out of control, where adding a single rule (e.g. transitivity) to a solver that barely helps makes it &lt;a href="https://magnushoff.com/articles/minesweeper/">practically solve the game completely&lt;/a>, making you wonder what is left to &amp;quot;play&amp;quot;.&lt;/p></description></item><item><title>Transparent iOS backups</title><link>https://dariusf.github.io/ios-backups/</link><pubDate>Thu, 30 Jul 2020 17:49:26 +0800</pubDate><guid>https://dariusf.github.io/ios-backups/</guid><description>&lt;p>Backing up an iOS device is nice and simple: there's iCloud, or connecting your device, opening Finder, and clicking &lt;em>Back Up Now&lt;/em>.
Unfortunately this process is also rather opaque: all we can do in Finder is to create and restore backups, not view their contents.
I'd like to be able to extract individual files and archive them elsewhere.&lt;/p>
&lt;p>At the time of writing there are no up-to-date and polished open source apps for simply viewing backup data in an open format, so here we'll explore how iOS backups are structured and figure out how to extract the raw files.&lt;/p></description></item><item><title>Bags of puzzle pieces in ASP</title><link>https://dariusf.github.io/asp-puzzle-pieces/</link><pubDate>Sat, 25 Nov 2017 12:15:06 +0800</pubDate><guid>https://dariusf.github.io/asp-puzzle-pieces/</guid><description>&lt;p>Answer set programming is an offshoot of traditional logic programming with a number of nice properties: programs always terminate, are fully declarative (i.e. clause ordering doesn't matter and search is complete, unlike Prolog), and have a &lt;a href="https://en.wikipedia.org/wiki/Stable_model_semantics">well-defined semantics&lt;/a>. Modelling a domain with relations is a wonderfully high-level way to reason about things, allowing complex rules to be represented &lt;a href="https://en.wikipedia.org/wiki/Answer_set_programming#Examples_of_ASP_programs">concisely&lt;/a>.&lt;/p>
&lt;p>ASP is typically applied to hard search problems, but can model pretty much anything. One area it's popular in is game design, particularly for &lt;a href="https://adamsmith.as/papers/tciaig-asp4pcg.pdf">procedural content generation&lt;/a>: if we can write down the rules of, say, a puzzle game, we can straightforwardly sample valid puzzles (or even &lt;a href="https://adamsmith.as/papers/fdg2013_shortcuts.pdf">solutions to puzzles&lt;/a>) with desirable properties.&lt;/p></description></item></channel></rss>